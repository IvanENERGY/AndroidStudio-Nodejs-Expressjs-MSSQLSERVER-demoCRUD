const httpStatus=require('http-status-codes');
const Task = require('../models/task');
var config =require('../db_config');
const sql=require ('mssql');

module.exports={
    //READ
    index:(req,res,next)=>{
        sql.connect(config).then(()=>{
        let sqlRequest= new sql.Request();
        return sqlRequest.query(`select * from Task`)
        //return sqlRequest.execute('sp_GetAllTask')
        })
        .then((result)=>{
            res.locals.data=result.recordset;
            res.locals.opMsg="Retrieve Successful";
            next();
        })
        .catch(err => {
            res.locals.opMsg="err fetching all!";
            next(err);
        })  
    },
    indexOne:(req,res,next)=>{
        let id=req.params.id;
        sql.connect(config).then(()=>{
            let sqlRequest= new sql.Request();
            return sqlRequest.input('id',sql.Int,id)
                            .query(`select * from Task WHERE id = @id`)
                           // .execute('sp_GetOneTask')
            })
            .then((result)=>{
                res.locals.data=result.recordset[0];
                res.locals.opMsg="Retrieve Successful";
                next();
            })
            .catch(err => {
                res.locals.opMsg="err fetching one!";
                next(err);
            })  
    },
    //CREATE
    create:(req,res,next)=>{
        const task=new Task(
            req.body.taskName,
            req.body.deadline,
            req.body.reps,
            req.body.filePath
        )
        sql.connect(config).then(()=>{
            let sqlRequest= new sql.Request();
            return sqlRequest.input('taskName',sql.NVarChar,task.taskName)
                            .input('deadline',sql.Date,task.deadline)
                            .input('reps',sql.Int,task.reps)
                            .input('filePath',sql.NVarChar,task.filePath)
                            .query(`Insert into Task (taskName,deadline,reps,filePath)
				                    values(@taskName,@deadline,@reps,@filePath )`)
                            //.execute('sp_CreateTask')
                            
        })
        .then((result)=>{
            res.locals.data=result;
            res.locals.opMsg="Create Successful";
            next();
        }).catch((err)=>{
            res.locals.opMsg="err adding ! "+err;
            next(err);
        })
    },
    //UPDATE
    update:(req,res,next)=>{
        let task=new Task(
            req.body.taskName,
            req.body.deadline,
            req.body.reps,
            req.body.filePath
        )
        sql.connect(config).then(()=>{
            let sqlRequest= new sql.Request();
            return sqlRequest.input('id',sql.Int,req.params.id)

                            .input('taskName',sql.NVarChar,task.taskName)
                            .input('deadline',sql.Date,task.deadline)
                            .input('reps',sql.Int,task.reps)
                            .input('filePath',sql.NVarChar,task.filePath)

                            .query(`UPDATE Task
                                    SET taskName= @taskName,
                                        deadline=@deadline,
                                        reps=@reps,
                                        filePath=@filePath 
                                    WHERE id=@id`)
                            //.execute('sp_UpdateTask')
        })
        .then((result)=>{ 
                    res.locals.data=result;
                    res.locals.opMsg="Update Successful";
                    next();
                })
        .catch((err)=>{
            res.locals.opMsg="CANOT update task"+err;
            next(err);
        })
    },

    // //DELETE
    delete:(req,res,next)=>{
        sql.connect(config).then(()=>{
            let sqlRequest= new sql.Request();
            return sqlRequest.input('id',sql.Int,req.params.id)
                            .query(`DELETE FROM Task WHERE id=@id`)
                            //.execute('sp_DeleteTask')
        })
        .then((result)=>{
            res.locals.data=result;
            res.locals.opMsg="Delete Successful";
            next();
        })
        .catch((err)=>{
            res.locals.opMsg="CANOT Delete"+err;
            next(err);
        });
    },



    respondJSON:(req,res)=>{
        res.json({
            status:httpStatus.StatusCodes.OK,
            data:res.locals.data,
            opMsg:res.locals.opMsg
        })
    },
    errorJSON:(error,req,res,next)=>{
        let errorObj;
        if(error){
            errorObj={
                status:httpStatus.StatusCodes.INTERNAL_SERVER_ERROR,
                message:error.message
            }
        }else{
            errorObj={
                status:httpStatus.StatusCodes.INTERNAL_SERVER_ERROR,
                message:"Unknown error"
            }
        }
        res.json(errorObj);
    }
}